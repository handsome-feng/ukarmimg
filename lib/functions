#!/usr/bin/env bash

GREEN='\033[0;32m'
RED='\033[0;31m'
WHITE='\033[0;37m'
YELLOW='\033[0;33m'
RESET='\033[0m'

function error() {
    echo -e "${RED}Error: $1${RESET}"
    exit 0
}

function success() {
    echo -e "${GREEN}Success: $1${RESET}"
    return
}

function warning() {
    echo -e "${YELLOW}Warning: $1${RESET}"
    return
}

function wecho() {
    echo -e "${WHITE}$1${RESET}"
    return
}

function host_install_package() {
    wecho "install $1 ..."
    apt install -q -y "$1" > /dev/null 2>&1
    if [ ! $? -eq 0 ] ; then
        error "Package $1 is install failed"
    fi
}

function host_check_package() {
    wecho "check $1 ..."
    dpkg -s "$1" &> /dev/null
    if [ ! $? -eq 0 ] ; then
        error "Package $1 is not installed"
    fi
}

function host_add_ppa() {
    wecho "add ppa repo: $2"
    add-apt-repository -y "$1" > /dev/null 2>&1
    if [ ! $? -eq 0 ] ; then
        error "Add $1 failed"
    fi
}

function host_check_file_will_error() {
    wecho "check ${1} ..."
    if [ ! -f "${1}" ]; then
        error "can not found $1, no such file"
    fi
}

function host_check_file_will_warning() {
    wecho "check ${1} ..."
    if [ ! -f "${1}" ]; then
        warning "$1 is not exist, create it"
        touch "${1}"
    fi
}

function host_check_directory_will_error() {
    wecho "check ${1} ..."
    if [ ! -d "${1}" ]; then
        error "can not found $1, no such directory"
    fi
}

function host_check_directory_will_warning() {
    wecho "check ${1} ..."
    if [ ! -d "${1}" ]; then
        warning "$1 is not exist, create it"
        mkdir -p "${1}"
    fi
}

function host_remove_file() {
    if [ -f "${1}/${2}" ]; then
        rm -f "${1}"
        wecho "$2 is removed"
    fi
}

function host_remove_directory() {
    if [ -f "${1}/${2}" ]; then
        rm -rf "${1}"
        wecho "$1 is removed"
    fi
}

function chroot_install_package() {
    wecho "install $2 ..."
    chroot "$1" apt install -q -y "$2" > /dev/null 2>&1
    if [ ! $? -eq 0 ] ; then
        error "Package $2 is install failed"
    fi
}

function chroot_remove_package() {
    wecho "remove $2 ..."
    chroot "$1" apt remove --purge -q -y "$2" > /dev/null 2>&1
    if [ ! $? -eq 0 ] ; then
        warning "Package $2 is remove failed"
    fi
}

function chroot_check_package() {
    wecho "check $2 ..."
    chroot "$1" dpkg -s "$2" &> /dev/null
    if [ ! $? -eq 0 ] ; then
        error "Package $2 is not installed"
    fi
}

function chroot_add_ppa() {
    wecho "add ppa repo: $2"
    chroot "$1" add-apt-repository -y "$2" > /dev/null 2>&1
    if [ ! $? -eq 0 ] ; then
        error "Add $2 failed"
    fi
}

function chroot_check_file_will_error() {
    wecho "check ${1}/${2} ..."
    if [ ! -f "${1}/${2}" ]; then
        error "can not found $2, no such file"
    fi
}

function chroot_check_file_will_warning() {
    wecho "check ${1}/${2} ..."
    if [ ! -f "${1}/${2}" ]; then
        warning "$2 is not exist, create it"
        chroot "$1" touch "${2}"
    fi
}

function chroot_check_directory_will_error() {
    wecho "check ${1}/${2} ..."
    if [ ! -d "${1}/${2}" ]; then
        error "can not found $2, no such directory"
    fi
}

function chroot_check_directory_will_warning() {
    wecho "check ${1}/${2} ..."
    if [ ! -d "${1}/${2}" ]; then
        warning "$2 is not exist, create it"
        chroot "$1" mkdir -p "${2}"
    fi
}

function chroot_remove_file() {
    if [ -f "${1}/${2}" ]; then
        chroot "$1" rm -f "${2}"
        wecho "$2 is removed"
    fi
}

function chroot_remove_directory() {
    if [ -f "${1}/${2}" ]; then
        chroot "$1" rm -rf "${2}"
        wecho "$2 is removed"
    fi
}

function auto_umount() {
    if mount | grep "$1" > /dev/null; then
        umount "$1"
    fi
}

function check_var_will_bool() {
    if [ -z "${1}" ]; then
        return 1
    else
        return 0
    fi
}

function check_var_will_error() {
    if [ -z "${1}" ]; then
        error "$2"
    fi
}

function check_var_will_warning() {
    if [ -z "${1}" ]; then
        warning "$1 value is empty"
    fi
}

function align_usage_args() {
    echo -e "$1\n\t$2\n"
}

function chroot_instsall_packages_from_file() {
    while IFS= read -r line
    do
        chroot_install_package "$1" "$line"
        chroot_check_package "$1" "$line"
    done < "${2}"
}

function chroot_remove_packages_from_file() {
    while IFS= read -r line
    do
        chroot_remove_package "$1" "$line"
    done < "${2}"
}

function chroot_add_ppa_from_file() {
    while IFS= read -r line
    do
        chroot_add_ppa "$1" "$line"
    done < "${2}"
}

function chroot_apt_update() {
    wecho "apt cache update ..."
    chroot "$1" apt update -q > /dev/null 2>&1
    if [ ! $? -eq 0 ] ; then
        error "chroot: Repo cache update failed"
    fi
}

function chroot_apt_upgrade() {
    wecho "update upgrable package ..."
    chroot "$1" apt upgrade -y -q > /dev/null 2>&1
    if [ ! $? -eq 0 ] ; then
        error "chroot: rootfs upgrade failed"
    fi
}

function chroot_apt_clean() {
    wecho "clean apt cache ..."
    chroot "$1" apt clean > /dev/null 2>&1
    if [ ! $? -eq 0 ] ; then
        error "chroot: rootfs apt clean failed"
    fi
}

function chroot_create_user() {
    if chroot "$1" id -u "$2" > /dev/null 2>&1; then
        warning "User $2 existed, skip create it."
        return
    fi
    chroot "$1" useradd "$2" --create-home --password "$(openssl passwd -1 "$3")" --shell /bin/bash --user-group
    chroot "$1" usermod -a -G sudo,adm "$2"
}

function chroot_echo_to_file() {
    chroot "$1" echo -e "$3" > "$2"
}

function chroot_echo_append_file() {
    chroot "$1" echo -e "$3" >> "$2"
}

function chroot_set_apt_sources() {
    chroot_echo_to_file "$1" "/etc/apt/sources.list" "deb ${2} ${3} main restricted universe multiverse"
    chroot_echo_append_file "$1" "/etc/apt/sources.list" "deb ${2} ${3}-updates main restricted universe multiverse"
    chroot_echo_append_file "$1" "/etc/apt/sources.list" "deb ${2} ${3}-security main restricted universe multiverse"
    chroot_echo_append_file "$1" "/etc/apt/sources.list" "deb ${2} ${3}-backports main restricted universe multiverse"
    chroot_echo_append_file "$1" "/etc/apt/sources.list" "# deb ${2} ${3}-proposed main restricted universe multiverse"
}

function chroot_copy_config_to_file() {
    wecho "copy $2 to ${1}/${2} ..."
    host_check_file_will_error "$2" "$2 is not existed"
    content="$(cat "$2")"
    chroot "$1" echo "$content" > "$3"
}

function chroot_copy_file_to_directory() {
    wecho "copy $1 to $2 ..."
    cp -rf "$1" "$2"
}
